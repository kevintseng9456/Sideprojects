//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Workorder_web.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SSOLogin", ReplyAction="http://tempuri.org/IService1/SSOLoginResponse")]
        string SSOLogin(string UserID, string strID, string strPassWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SSOLogin", ReplyAction="http://tempuri.org/IService1/SSOLoginResponse")]
        System.Threading.Tasks.Task<string> SSOLoginAsync(string UserID, string strID, string strPassWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProductionScheduleReport", ReplyAction="http://tempuri.org/IService1/ProductionScheduleReportResponse")]
        byte[] ProductionScheduleReport(string GetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProductionScheduleReport", ReplyAction="http://tempuri.org/IService1/ProductionScheduleReportResponse")]
        System.Threading.Tasks.Task<byte[]> ProductionScheduleReportAsync(string GetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DailyProductionReport", ReplyAction="http://tempuri.org/IService1/DailyProductionReportResponse")]
        byte[] DailyProductionReport(string GetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DailyProductionReport", ReplyAction="http://tempuri.org/IService1/DailyProductionReportResponse")]
        System.Threading.Tasks.Task<byte[]> DailyProductionReportAsync(string GetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProductionDailyReport", ReplyAction="http://tempuri.org/IService1/ProductionDailyReportResponse")]
        byte[] ProductionDailyReport(string GetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProductionDailyReport", ReplyAction="http://tempuri.org/IService1/ProductionDailyReportResponse")]
        System.Threading.Tasks.Task<byte[]> ProductionDailyReportAsync(string GetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAssignment", ReplyAction="http://tempuri.org/IService1/getAssignmentResponse")]
        void getAssignment(string User, string PWD, string Path_Name, string WFName, string ProductLifeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAssignment", ReplyAction="http://tempuri.org/IService1/getAssignmentResponse")]
        System.Threading.Tasks.Task getAssignmentAsync(string User, string PWD, string Path_Name, string WFName, string ProductLifeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPart", ReplyAction="http://tempuri.org/IService1/GetAllPartResponse")]
        string GetAllPart(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPart", ReplyAction="http://tempuri.org/IService1/GetAllPartResponse")]
        System.Threading.Tasks.Task<string> GetAllPartAsync(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrder", ReplyAction="http://tempuri.org/IService1/GetOrderResponse")]
        string GetOrder(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrder", ReplyAction="http://tempuri.org/IService1/GetOrderResponse")]
        System.Threading.Tasks.Task<string> GetOrderAsync(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProductPrice", ReplyAction="http://tempuri.org/IService1/GetProductPriceResponse")]
        string GetProductPrice(string site, string PartName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProductPrice", ReplyAction="http://tempuri.org/IService1/GetProductPriceResponse")]
        System.Threading.Tasks.Task<string> GetProductPriceAsync(string site, string PartName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Workorder_web.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Workorder_web.ServiceReference1.IService1>, Workorder_web.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SSOLogin(string UserID, string strID, string strPassWord) {
            return base.Channel.SSOLogin(UserID, strID, strPassWord);
        }
        
        public System.Threading.Tasks.Task<string> SSOLoginAsync(string UserID, string strID, string strPassWord) {
            return base.Channel.SSOLoginAsync(UserID, strID, strPassWord);
        }
        
        public byte[] ProductionScheduleReport(string GetDate) {
            return base.Channel.ProductionScheduleReport(GetDate);
        }
        
        public System.Threading.Tasks.Task<byte[]> ProductionScheduleReportAsync(string GetDate) {
            return base.Channel.ProductionScheduleReportAsync(GetDate);
        }
        
        public byte[] DailyProductionReport(string GetDate) {
            return base.Channel.DailyProductionReport(GetDate);
        }
        
        public System.Threading.Tasks.Task<byte[]> DailyProductionReportAsync(string GetDate) {
            return base.Channel.DailyProductionReportAsync(GetDate);
        }
        
        public byte[] ProductionDailyReport(string GetDate) {
            return base.Channel.ProductionDailyReport(GetDate);
        }
        
        public System.Threading.Tasks.Task<byte[]> ProductionDailyReportAsync(string GetDate) {
            return base.Channel.ProductionDailyReportAsync(GetDate);
        }
        
        public void getAssignment(string User, string PWD, string Path_Name, string WFName, string ProductLifeID) {
            base.Channel.getAssignment(User, PWD, Path_Name, WFName, ProductLifeID);
        }
        
        public System.Threading.Tasks.Task getAssignmentAsync(string User, string PWD, string Path_Name, string WFName, string ProductLifeID) {
            return base.Channel.getAssignmentAsync(User, PWD, Path_Name, WFName, ProductLifeID);
        }
        
        public string GetAllPart(string site) {
            return base.Channel.GetAllPart(site);
        }
        
        public System.Threading.Tasks.Task<string> GetAllPartAsync(string site) {
            return base.Channel.GetAllPartAsync(site);
        }
        
        public string GetOrder(string site) {
            return base.Channel.GetOrder(site);
        }
        
        public System.Threading.Tasks.Task<string> GetOrderAsync(string site) {
            return base.Channel.GetOrderAsync(site);
        }
        
        public string GetProductPrice(string site, string PartName) {
            return base.Channel.GetProductPrice(site, PartName);
        }
        
        public System.Threading.Tasks.Task<string> GetProductPriceAsync(string site, string PartName) {
            return base.Channel.GetProductPriceAsync(site, PartName);
        }
    }
}
